# -*- coding: utf-8 -*-
"""IDPRF.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19DSfUPMAdqrGNBLAt2TrliWPsLKUXP52
"""

import streamlit as st
import cv2
import numpy as np
from skimage.metrics import structural_similarity as ssim

# Streamlit page config
st.set_page_config(layout="wide", page_title="PAN Tampering Detector", page_icon="üßæ")

# Custom CSS
st.markdown("""
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        html, body, [class*="css"] {
            font-family: 'Poppins', sans-serif;
            background-image: url('https://securitybrief.com.au/uploads/story/2023/11/21/img-uHjtyDXD22ap9rDtjKm0TVzU.webp');
            background-size: cover;
            background-attachment: fixed;
            background-repeat: no-repeat;
            color: #2c3e50;
        }

        .title {
            text-align: center;
            font-size: 3rem;
            font-weight: 700;
            margin-top: 30px;
            color: #ffffff;
            text-shadow: 2px 2px 5px #00000088;
        }

        .desc {
            text-align: center;
            font-size: 1.25rem;
            margin-bottom: 40px;
            color: #ecf0f1;
        }

        .result-box {
            padding: 1.2rem;
            border-radius: 12px;
            margin: 1rem 0;
            font-size: 1.3rem;
            font-weight: bold;
            text-align: center;
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.2);
        }

        .valid {
            color: green;
            border-left: 6px solid green;
        }

        .fake {
            color: red;
            border-left: 6px solid red;
            animation: shake 0.4s ease-in-out 2;
        }

        @keyframes shake {
            0% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            50% { transform: translateX(5px); }
            75% { transform: translateX(-5px); }
            100% { transform: translateX(0); }
        }

        .mismatch-field {
            background: rgba(255, 0, 0, 0.2);
            padding: 0.8rem;
            border-radius: 10px;
            font-size: 1.1rem;
            font-weight: bold;
            color: darkred;
            margin: 1rem 0;
            text-align: center;
        }

        .section-header {
            font-size: 1.8rem;
            color: #ffffff;
            margin-top: 2rem;
            text-shadow: 1px 1px 3px #00000088;
        }

        hr {
            border: none;
            height: 2px;
            background: #ffffff44;
            margin: 2rem 0;
        }
    </style>
""", unsafe_allow_html=True)

# Title and description
st.markdown("<div class='title'>üîç PAN Card Tampering Detection App</div>", unsafe_allow_html=True)
st.markdown("<div class='desc'>Upload the original and suspected PAN card images. The app will detect any tampering in key fields.</div>", unsafe_allow_html=True)

# Preprocess images
def preprocess_image(image):
    image = cv2.imdecode(np.frombuffer(image.read(), np.uint8), cv2.IMREAD_GRAYSCALE)
    image = cv2.resize(image, (400, 250))
    return image

# Compute SSIM
def compare_images(image1, image2):
    score, diff = ssim(image1, image2, full=True)
    diff = (diff * 255).astype("uint8")
    return score, diff

# Highlight tampered sections
def highlight_tampered_sections(reference, test, diff):
    thresh = cv2.adaptiveThreshold(diff, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY_INV, 11, 2)
    kernel = np.ones((3, 3), np.uint8)
    thresh = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel)
    contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    result_image = cv2.cvtColor(test, cv2.COLOR_GRAY2BGR)
    tampered_areas = []

    for contour in contours:
        if cv2.contourArea(contour) > 50:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(result_image, (x, y), (x + w, y + h), (0, 0, 255), 2)
            tampered_areas.append((x, y, w, h))

    return result_image, thresh, tampered_areas

# PAN regions
regions = {
    "PAN Number": (30, 10, 200, 70),
    "Candidate Name": (210, 10, 370, 70),
    "Father's/Mother's Name": (30, 80, 200, 130),
    "Date of Birth": (210, 80, 370, 130),
    "Photo": (30, 140, 160, 210),
    "QR Code": (260, 140, 390, 210),
    "Signature": (130, 210, 270, 250),
    "Number Below QR Code": (260, 210, 390, 245)
}

# Uploads
reference_file = st.file_uploader("üì§ Upload Original PAN Card", type=["png", "jpg", "jpeg"])
test_files = st.file_uploader("üì§ Upload Suspected PAN Card(s)", type=["png", "jpg", "jpeg"], accept_multiple_files=True)

# Main logic
if reference_file and test_files:
    ref_img = preprocess_image(reference_file)

    for test_file in test_files:
        test_img = preprocess_image(test_file)
        score, diff = compare_images(ref_img, test_img)
        result_img, thresh_img, tampered_areas = highlight_tampered_sections(ref_img, test_img, diff)

        detected_fields = []
        for (x, y, w, h) in tampered_areas:
            cx, cy = x + w // 2, y + h // 2
            for label, (x1, y1, x2, y2) in regions.items():
                if x1 <= cx <= x2 and y1 <= cy <= y2:
                    if label not in detected_fields:
                        detected_fields.append(label)

        result = "‚úÖ Valid PAN Card" if score >= 0.7 and not detected_fields else "‚ùå Fake PAN Card"
        result_class = "valid" if "Valid" in result else "fake"

        # Result box
        st.markdown(f"""
            <div class="result-box {result_class}">
                Result for <strong>{test_file.name}</strong>: {result}
            </div>
        """, unsafe_allow_html=True)

        # Display mismatched fields
        if detected_fields:
            fields_str = ", ".join(detected_fields)
            st.markdown(f"<div class='mismatch-field'>‚ö† Mismatched Field(s): <strong>{fields_str}</strong></div>", unsafe_allow_html=True)

        # Images and comparisons
        st.markdown("<div class='section-header'>üì∑ Comparison View</div>", unsafe_allow_html=True)
        col1, col2 = st.columns(2)
        with col1:
            st.image(ref_img, caption="Original PAN Card", use_container_width=True, channels="GRAY")
        with col2:
            st.image(test_img, caption="Suspected PAN Card", use_container_width=True, channels="GRAY")

        st.markdown("<div class='section-header'>üß† SSIM & Thresholded Differences</div>", unsafe_allow_html=True)
        col3, col4 = st.columns(2)
        with col3:
            st.image(diff, caption="SSIM Difference Image", use_container_width=True, channels="GRAY")
        with col4:
            st.image(thresh_img, caption="Threshold Image", use_container_width=True, channels="GRAY")

        st.markdown("<div class='section-header'>üö® Highlighted Tampered Sections</div>", unsafe_allow_html=True)
        st.image(result_img, caption="Detected Tampered Sections ", use_container_width=True)

        st.markdown("<hr/>", unsafe_allow_html=True)